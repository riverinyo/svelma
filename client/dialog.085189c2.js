import{c as t,d as e,b as n,A as r,e as o,J as a,B as s,f as c,g as i,h as l,i as p,x as m,l as u,m as $,u as f,s as h,y as d,a as g}from"./chunk.8e27e64b.js";import{f as v,i as w,j as k}from"./chunk.a28bd58e.js";import"./chunk.0a41e55b.js";import{a as y}from"./chunk.d9e61e23.js";import"./chunk.acff7986.js";import{a as D}from"./chunk.d45aa407.js";import{a as j}from"./chunk.d70a21b6.js";function b(t){var e;return{c(){e=a("Dialog")},l(t){e=s(t,"Dialog")},m(t,n){u(t,e,n)},d(t){t&&l(e)}}}function E(t){var e;return{c(){e=a("Confirm")},l(t){e=s(t,"Confirm")},m(t,n){u(t,e,n)},d(t){t&&l(e)}}}function x(t){var e;return{c(){e=a("Confirm (custom)")},l(t){e=s(t,"Confirm (custom)")},m(t,n){u(t,e,n)},d(t){t&&l(e)}}}function _(t){var e,n,a,g,w=new v({props:{type:"is-primary",$$slots:{default:[b]},$$scope:{ctx:t}}});w.$on("click",t.click_handler);var k=new v({props:{type:"is-info",$$slots:{default:[E]},$$scope:{ctx:t}}});k.$on("click",t.click_handler_1);var y=new v({props:{type:"is-danger",$$slots:{default:[x]},$$scope:{ctx:t}}});return y.$on("click",t.click_handler_2),{c(){e=o("div"),w.$$.fragment.c(),n=r(),k.$$.fragment.c(),a=r(),y.$$.fragment.c(),this.h()},l(t){e=c(t,"DIV",{slot:!0},!1);var r=i(e);w.$$.fragment.l(r),n=s(r,"\n    "),k.$$.fragment.l(r),a=s(r,"\n    "),y.$$.fragment.l(r),r.forEach(l),this.h()},h(){p(e,"slot","preview")},m(t,r){u(t,e,r),m(w,e,null),$(e,n),m(k,e,null),$(e,a),m(y,e,null),g=!0},p(t,e){var n={};t.$$scope&&(n.$$scope={changed:t,ctx:e}),w.$set(n);var r={};t.$$scope&&(r.$$scope={changed:t,ctx:e}),k.$set(r);var o={};t.$$scope&&(o.$$scope={changed:t,ctx:e}),y.$set(o)},i(t){g||(f(w.$$.fragment,t),f(k.$$.fragment,t),f(y.$$.fragment,t),g=!0)},o(t){h(w.$$.fragment,t),h(k.$$.fragment,t),h(y.$$.fragment,t),g=!1},d(t){t&&l(e),d(w),d(k),d(y)}}}function P(t){return{c:g,l:g,m:g,p:g,i:g,o:g,d:g}}function B(t){var e;return{c(){e=a("Prompt")},l(t){e=s(t,"Prompt")},m(t,n){u(t,e,n)},d(t){t&&l(e)}}}function C(t){var e;return{c(){e=a("Date Prompt")},l(t){e=s(t,"Date Prompt")},m(t,n){u(t,e,n)},d(t){t&&l(e)}}}function T(t){var e,n,a,g=new v({props:{type:"is-primary",$$slots:{default:[B]},$$scope:{ctx:t}}});g.$on("click",t.click_handler_3);var w=new v({props:{type:"is-link",$$slots:{default:[C]},$$scope:{ctx:t}}});return w.$on("click",t.click_handler_4),{c(){e=o("div"),g.$$.fragment.c(),n=r(),w.$$.fragment.c(),this.h()},l(t){e=c(t,"DIV",{slot:!0},!1);var r=i(e);g.$$.fragment.l(r),n=s(r,"\n    "),w.$$.fragment.l(r),r.forEach(l),this.h()},h(){p(e,"slot","preview")},m(t,r){u(t,e,r),m(g,e,null),$(e,n),m(w,e,null),a=!0},p(t,e){var n={};t.$$scope&&(n.$$scope={changed:t,ctx:e}),g.$set(n);var r={};t.$$scope&&(r.$$scope={changed:t,ctx:e}),w.$set(r)},i(t){a||(f(g.$$.fragment,t),f(w.$$.fragment,t),a=!0)},o(t){h(g.$$.fragment,t),h(w.$$.fragment,t),a=!1},d(t){t&&l(e),d(g),d(w)}}}function I(t){return{c:g,l:g,m:g,p:g,i:g,o:g,d:g}}function O(t){var e,n,g,v,w,k,b,E,x,B,C,O,Y,A,U,q,H,W,S,V,J,R,z,F,G,K,L,M,N,Q,X,Z,tt,et,nt,rt,ot,at,st,ct=new y({props:{title:"Dialog",subtitle:"User alerts, promps, and confirmation dialogs"}}),it=new D({props:{code:"<script>\n  import { Button, Dialog } from 'svelma'\n\n  function alert() {\n    Dialog.alert('Alles ist gut')\n  }\n\n  const thenHandler = result => Toast.create(`You ${result ? 'confirmed' : 'canceled'}`)\n\n  function confirm(type) {\n    switch(type) {\n      case 'custom':\n        return Dialog.confirm({\n          message: 'This is a custom confirmation message',\n          title: \"I'm a title!\",\n          type: 'is-danger',\n          icon: 'times-circle'\n        })\n        .then(thenHandler)\n      default:\n        Dialog.confirm('Shall we dance?')\n        .then(thenHandler)\n    }\n  }\n<\/script>\n\n<Button type=\"is-primary\" on:click={() => alert()}>Dialog</Button>\n<Button type=\"is-info\" on:click={() => confirm()}>Confirm</Button>\n<Button type=\"is-danger\" on:click={() => confirm('custom')}>Confirm (custom)</Button>\n",$$slots:{default:[P],preview:[_]},$$scope:{ctx:t}}}),lt=new D({props:{code:"<script>\n  import { Button, Dialog, Toast } from 'svelma'\n\n  function prompt(opts) {\n    Dialog.prompt({\n      message: \"What is your quest?\",\n      ...opts\n    })\n    .then(prompt => Toast.create(`Your answer was: '${prompt}'`))\n  }\n<\/script>\n\n<Button type=\"is-primary\" on:click={() => prompt()}>Prompt</Button>\n<Button type=\"is-link\" on:click={() => prompt({ message: 'Which date?', inputProps: { type: 'date' }})}>Date Prompt</Button>",$$slots:{default:[I],preview:[T]},$$scope:{ctx:t}}}),pt=new j({props:{jsdoc:t.jsdoc}});return{c(){ct.$$.fragment.c(),e=r(),n=o("p"),g=a("Alert and Dialog"),v=r(),w=o("p"),k=a("Use "),b=o("code"),E=a("Dialog.alert()"),x=a(" and "),B=o("code"),C=a("Dialog.confirm()"),O=a(" to create these kinds of dialogs.\nThe methods return a promise that is resolved when the user cancels or confirms the alert. If the use closes/cancels the\nvalue will be "),Y=o("code"),A=a("false"),U=a(". If the user clicks the confirm button the value will be "),q=o("code"),H=a("true"),W=a(".\n\nThe first argument can either be an object of options or a string to use as the message."),S=r(),it.$$.fragment.c(),V=r(),J=o("hr"),R=r(),z=o("p"),F=a("Prompt"),G=r(),K=o("p"),L=a("Use "),M=o("code"),N=a("Dialog.prompt()"),Q=a(" to programmatically create prompts for user input. By default the\ndialog will be created with a required text input. You can control the props (attributes) on the prompt with the\n"),X=o("code"),Z=a("inputProps"),tt=a(" prop.\n\n"),et=o("code"),nt=a("prompt()"),rt=a(" returns a promise that will be resolved with the prompt input value if the user confirms, or null\nif they cancel/close."),ot=r(),lt.$$.fragment.c(),at=r(),pt.$$.fragment.c(),this.h()},l(t){ct.$$.fragment.l(t),e=s(t,"\n\n"),n=c(t,"P",{class:!0},!1);var r=i(n);g=s(r,"Alert and Dialog"),r.forEach(l),v=s(t,"\n\n"),w=c(t,"P",{class:!0},!1);var o=i(w);k=s(o,"Use "),b=c(o,"CODE",{},!1);var a=i(b);E=s(a,"Dialog.alert()"),a.forEach(l),x=s(o," and "),B=c(o,"CODE",{},!1);var p=i(B);C=s(p,"Dialog.confirm()"),p.forEach(l),O=s(o," to create these kinds of dialogs.\nThe methods return a promise that is resolved when the user cancels or confirms the alert. If the use closes/cancels the\nvalue will be "),Y=c(o,"CODE",{},!1);var m=i(Y);A=s(m,"false"),m.forEach(l),U=s(o,". If the user clicks the confirm button the value will be "),q=c(o,"CODE",{},!1);var u=i(q);H=s(u,"true"),u.forEach(l),W=s(o,".\n\nThe first argument can either be an object of options or a string to use as the message."),o.forEach(l),S=s(t,"\n\n"),it.$$.fragment.l(t),V=s(t,"\n\n"),J=c(t,"HR",{class:!0},!1),i(J).forEach(l),R=s(t,"\n\n"),z=c(t,"P",{class:!0},!1);var $=i(z);F=s($,"Prompt"),$.forEach(l),G=s(t,"\n\n"),K=c(t,"P",{class:!0},!1);var f=i(K);L=s(f,"Use "),M=c(f,"CODE",{},!1);var h=i(M);N=s(h,"Dialog.prompt()"),h.forEach(l),Q=s(f," to programmatically create prompts for user input. By default the\ndialog will be created with a required text input. You can control the props (attributes) on the prompt with the\n"),X=c(f,"CODE",{},!1);var d=i(X);Z=s(d,"inputProps"),d.forEach(l),tt=s(f," prop.\n\n"),et=c(f,"CODE",{},!1);var y=i(et);nt=s(y,"prompt()"),y.forEach(l),rt=s(f," returns a promise that will be resolved with the prompt input value if the user confirms, or null\nif they cancel/close."),f.forEach(l),ot=s(t,"\n\n"),lt.$$.fragment.l(t),at=s(t,"\n\n"),pt.$$.fragment.l(t),this.h()},h(){p(n,"class","title is-4"),p(w,"class","content"),p(J,"class","is-medium"),p(z,"class","title is-4"),p(K,"class","content")},m(t,r){m(ct,t,r),u(t,e,r),u(t,n,r),$(n,g),u(t,v,r),u(t,w,r),$(w,k),$(w,b),$(b,E),$(w,x),$(w,B),$(B,C),$(w,O),$(w,Y),$(Y,A),$(w,U),$(w,q),$(q,H),$(w,W),u(t,S,r),m(it,t,r),u(t,V,r),u(t,J,r),u(t,R,r),u(t,z,r),$(z,F),u(t,G,r),u(t,K,r),$(K,L),$(K,M),$(M,N),$(K,Q),$(K,X),$(X,Z),$(K,tt),$(K,et),$(et,nt),$(K,rt),u(t,ot,r),m(lt,t,r),u(t,at,r),m(pt,t,r),st=!0},p(t,e){var n={};t.$$scope&&(n.$$scope={changed:t,ctx:e}),it.$set(n);var r={};t.$$scope&&(r.$$scope={changed:t,ctx:e}),lt.$set(r);var o={};t.jsdoc&&(o.jsdoc=e.jsdoc),pt.$set(o)},i(t){st||(f(ct.$$.fragment,t),f(it.$$.fragment,t),f(lt.$$.fragment,t),f(pt.$$.fragment,t),st=!0)},o(t){h(ct.$$.fragment,t),h(it.$$.fragment,t),h(lt.$$.fragment,t),h(pt.$$.fragment,t),st=!1},d(t){d(ct,t),t&&(l(e),l(n),l(v),l(w),l(S)),d(it,t),t&&(l(V),l(J),l(R),l(z),l(G),l(K),l(ot)),d(lt,t),t&&l(at),d(pt,t)}}}async function Y(){const t=await this.fetch("components/dialog.json");return{jsdoc:await t.json()}}function A(t){w.prompt({message:"What is your quest?",...t}).then(t=>k.create(`Your answer was: '${t}'`))}function U(t,e,n){let{jsdoc:r}=e;const o=t=>k.create(`You ${t?"confirmed":"canceled"}`);function a(t){switch(t){case"custom":return w.confirm({message:"This is a custom confirmation message",title:"I'm a title!",type:"is-danger",icon:"times-circle"}).then(o);default:w.confirm("Shall we dance?").then(o)}}return t.$set=(t=>{"jsdoc"in t&&n("jsdoc",r=t.jsdoc)}),{jsdoc:r,confirm:a,click_handler:function(){w.alert("Alles ist gut")},click_handler_1:function(){return a()},click_handler_2:function(){return a("custom")},click_handler_3:function(){return A()},click_handler_4:function(){return A({message:"Which date?",inputProps:{type:"date"}})}}}export default class extends t{constructor(t){super(),e(this,t,U,O,n,["jsdoc"])}}export{Y as preload};
//# sourceMappingURL=dialog.085189c2.js.map
